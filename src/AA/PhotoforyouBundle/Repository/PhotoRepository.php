<?php

namespace AA\PhotoforyouBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PhotoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PhotoRepository extends EntityRepository
{
	public function getPhotosCatalogue($page, $nbPerPage)
	{
		$query = $this->createQueryBuilder('p')
		  ->where('p.acheteur is null')
		  ->getQuery()
		;

		$query
		  // On définit l'annonce à partir de laquelle commencer la liste
		  ->setFirstResult(($page-1) * $nbPerPage)
		  // Ainsi que le nombre d'annonce à afficher sur une page
		  ->setMaxResults($nbPerPage)
		;

		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
		return new Paginator($query, true);
	}

	public function getPhotosCatalogueAvecCategorie($page, $nbPerPage, $categorie)
	{
		$query = $this->createQueryBuilder('p')
		  ->leftJoin('p.categories', 'c')
		  ->addSelect('c')
		  ->where('p.acheteur is null')
		  ->andWhere("c.name = '$categorie'")
		  ->getQuery()
		;

		$query
		  // On définit l'annonce à partir de laquelle commencer la liste
		  ->setFirstResult(($page-1) * $nbPerPage)
		  // Ainsi que le nombre d'annonce à afficher sur une page
		  ->setMaxResults($nbPerPage)
		;

		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
		return new Paginator($query, true);
	}

	public function getPhotosVedette()
	{
		$qb = $this->createQueryBuilder('p')
		  ->where('p.acheteur is null')
	      ->orderBy('p.nbVues', 'DESC');

	    return $qb
	      ->getQuery()
	      ->getResult()
	    ;
	}

	public function getMesPhotos($nomMembre)
	{
		$query = $this->createQueryBuilder('p')
		  ->where("p.acheteur = '$nomMembre'")
		;

		return $query
	      ->getQuery()
	      ->getResult()
	    ;
	}

	public function getMesPhotosEnVente($nomMembre)
	{
		$query = $this->createQueryBuilder('p')
		  ->where("p.vendeur = '$nomMembre'")
		  ->andwhere('p.acheteur is null')
		;

		return $query
	      ->getQuery()
	      ->getResult()
	    ;
	}
}
